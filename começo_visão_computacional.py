# -*- coding: utf-8 -*-
"""Começo Visão Computacional.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1axItwfnnh9cTsMvfVD70Rd675ZBL7mGL

# Ferramentas Básicas do OpenCV
"""

!pip install opencv-python
!pip install numpy
!pip install matplotlib
!pip install dlib

#Importação das bibliotecas
import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow

!wget https://upload.wikimedia.org/wikipedia/en/7/7d/Lenna_%28test_image%29.png -O lena.jpg

# Lendo a imagem
imagem = cv2.imread('lena.jpg', 1)
plt.imshow(imagem)

plt.hist(imagem.ravel(), 256, [0,256])
plt.show()
#Histograma da imagem colorida

imagem2= cv2.imread('lena.jpg')

azul, verde, vermelho = cv2.split(imagem2)

#1 linha, 3 colunas, refere a primeira imagem
fig = plt.figure(figsize=(20, 5))

ax1 = fig.add_subplot(131)
ax1.hist(azul.ravel(), 256, [0, 256])
plt.title('Histograma de cor Azul')

ax2 = fig.add_subplot(132)
ax2.hist(verde.ravel(), 256, [0, 256])
plt.title('Histograma de cor Verde')

ax3 = fig.add_subplot(133)
ax3.hist(vermelho.ravel(), 256, [0, 256])
plt.title('Histograma de cor Vermelho')

#Equalização de histograma
imagem3 = cv2.imread('lena.jpg', 0)

imagem_eq_hist = cv2.equalizeHist(imagem3)

fig = plt.figure(figsize = (10, 5))
ax1 = fig.add_subplot(121)
plt.imshow(imagem3, cmap = plt.cm.gray)

ax2 = fig.add_subplot(122)
plt.imshow(imagem_eq_hist, cmap = plt.cm.gray)

plt.show()

#Histogramas das imagens acima em grayscale

fig = plt.figure(figsize = (20, 5))
ax1 = fig.add_subplot(121)
plt.hist(imagem3.ravel(), 256, [0, 256])

ax2 = fig.add_subplot(122)
plt.hist(imagem_eq_hist.ravel(), 256, [0, 256])

plt.show()

"""# Transformações Geométricas em Imagens"""

!wget https://static.todamateria.com.br/upload/al/be/alberteinstein-cke.jpg
imagem = cv2.imread('alberteinstein-cke.jpg')

plt.imshow(imagem)

linhas, colunas = imagem.shape[:2]
print (linhas)
print (colunas)

"""#Rotacionando a imagem"""

matriz_rotacao = cv2.getRotationMatrix2D((linhas/2, colunas/2),
                                          60,
                                          1)
imagem_rotacionada = cv2.warpAffine(imagem,
                                    matriz_rotacao,
                                    (colunas, linhas))

fig = plt.figure(figsize=(10, 8))
plt.imshow(imagem_rotacionada, cmap = plt.cm.gray)

"""#Translação de uma Imagem"""

matriz_translacao = np.float32([[1, 0, 100], [0, 1, 100]])

imagem_deslocada = cv2.warpAffine(imagem,
                                  matriz_translacao,
                                  (colunas, linhas))

fig = plt.figure(figsize = (10, 8))
plt.imshow(imagem_deslocada, cmap = plt.cm.gray)

"""#Escalonando(Redimensionando) Uma Imagem"""

imagem_escalonada = cv2.resize(imagem,
                               None,
                               fx = 0.4,
                               fy = 0.4,
                               interpolation = cv2.INTER_CUBIC)

cv2_imshow(imagem)
cv2_imshow(imagem_escalonada)
cv2.waitKey(0)
cv2.destroyAllWindows()

#Imagem original e imagem escalonada

linhas, colunas = imagem.shape[:2]
print(linhas)
print(colunas)
print()
linhas, colunas = imagem_escalonada.shape[:2]
print(linhas)
print(colunas)

largura = imagem.shape[1]
altura = imagem.shape[0]
proporcao = float(altura /largura)
largura_nova = 200
altura_nova = int(largura_nova*proporcao)

fig = plt.figure(figsize=(8, 5))
plt.imshow(imagem, cmap = plt.cm.gray)

"""#Recortando uma Imagem


"""

recorte = imagem[100:200, 100:200]

fig = plt.figure(figsize = (8, 5))
plt.imshow(recorte, cmap = plt.cm.gray)

"""#Espelhando uma imagem"""

flip_horizontal = cv2.flip(imagem, 1)

fig = plt.figure(figsize = (8, 5))
plt.imshow(flip_horizontal, cmap = plt.cm.gray)

flip_vertical = cv2.flip(imagem, 0)

fig = plt.figure(figsize = (8, 5))
plt.imshow(flip_vertical, cmap = plt.cm.gray)
